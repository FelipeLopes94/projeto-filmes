{"version":3,"sources":["components/Card.js","components/Navbar.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Card","state","axios","get","then","res","filmes","data","results","setState","console","log","undefined","this","Spinner","animation","role","className","key","imagem","historia","hrefCollapse","idCollapse","map","filme","title","opening_crawl","style","width","src","alt","director","release_date","producer","episode_id","type","data-toggle","data-target","id","tabIndex","aria-labelledby","aria-hidden","data-dismiss","aria-label","React","Component","NavBar","Footer","href","App","classnName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a983b316.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\"\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n\r\n\r\nclass Card extends React.Component {\r\n\r\n  componentDidMount() {\r\n    axios.get(`https://swapi.co/api/films/`).then(res => {\r\n      const filmes = res.data.results;\r\n      this.setState({ filmes });\r\n      console.log(\"Lista de filmes\", filmes);\r\n    });\r\n  }\r\n \r\n  state = {};\r\n\r\n  render() {\r\n      if (this.state.filmes === undefined) return  <Spinner animation=\"border\" role=\"status\"><span className=\"sr-only\" key=\"spinner-loader\">Loading...</span> </Spinner>\r\n\r\n      let imagem = \"https://upload.wikimedia.org/wikipedia/pt/thumb/f/f6/P%C3%B4ster_Star_Wars.jpg/250px-P%C3%B4ster_Star_Wars.jpg\"\r\n      let historia = \"It is a period of civil war.\\r\\nRebel spaceships, striking\\r\\nfrom a hidden base, have won\\r\\ntheir first victory against\\r\\nthe evil Galactic Empire.\\r\\n\\r\\nDuring the battle, Rebel\\r\\nspies managed to steal secret\\r\\nplans to the Empire's\\r\\nultimate weapon, the DEATH\\r\\nSTAR, an armored space\\r\\nstation with enough power\\r\\nto destroy an entire planet.\\r\\n\\r\\nPursued by the Empire's\\r\\nsinister agents, Princess\\r\\nLeia races home aboard her\\r\\nstarship, custodian of the\\r\\nstolen plans that can save her\\r\\npeople and restore\\r\\nfreedom to the galaxy....\"\r\n      let hrefCollapse = \"#filme1\"\r\n      let idCollapse = \"filme1\"\r\n\r\n      return (\r\n\r\n        <div className=\"corpo-cards\" key={\"div-pai-cards\"}>\r\n        \r\n            {this.state.filmes.map(filme => {  //Mapear a lista que vem d API para rendereizar os cards\r\n\r\n              if (filme.title === \"Attack of the Clones\"){\r\n                  imagem = \"https://upload.wikimedia.org/wikipedia/pt/thumb/6/63/Star_Wars_The_Clone_Wars.jpg/250px-Star_Wars_The_Clone_Wars.jpg\";\r\n                    historia = this.state.filmes[1].opening_crawl\r\n                      hrefCollapse = \"#filme2\"\r\n                        idCollapse = \"filme2\"\r\n\r\n                  }\r\n                  else if (filme.title === \"The Phantom Menace\"){\r\n                    imagem = \"https://upload.wikimedia.org/wikipedia/pt/thumb/0/05/Star_Wars_Phantom_Menace_-_P%C3%B4ster.jpg/250px-Star_Wars_Phantom_Menace_-_P%C3%B4ster.jpg\";\r\n                      historia = this.state.filmes[2].opening_crawl\r\n                        hrefCollapse = \"#filme3\"\r\n                          idCollapse = \"filme3\"\r\n                  }\r\n                      else if(filme.title === \"Revenge of the Sith\"){\r\n                        imagem = \"https://upload.wikimedia.org/wikipedia/pt/thumb/5/58/Star_Wars_Epis%C3%B3dio_III_A_Vingan%C3%A7a_dos_Sith.jpg/250px-Star_Wars_Epis%C3%B3dio_III_A_Vingan%C3%A7a_dos_Sith.jpg\";\r\n                          historia = this.state.filmes[3].opening_crawl\r\n                            hrefCollapse = \"#filme4\"\r\n                              idCollapse = \"filme4\"\r\n\r\n                      }\r\n                          else if (filme.title === \"Return of the Jedi\"){\r\n                            imagem = \"https://upload.wikimedia.org/wikipedia/pt/thumb/b/b2/ReturnOfTheJediPoster1983.jpg/250px-ReturnOfTheJediPoster1983.jpg\";\r\n                              historia = this.state.filmes[4].opening_crawl\r\n                                hrefCollapse = \"#filme5\"\r\n                                  idCollapse = \"filme5\"\r\n                          }\r\n                              else if (filme.title === \"The Empire Strikes Back\"){\r\n                                imagem = \"https://upload.wikimedia.org/wikipedia/pt/thumb/5/5c/The_Empire_Strikes_Back.jpg/250px-The_Empire_Strikes_Back.jpg\";\r\n                                  historia = this.state.filmes[5].opening_crawl\r\n                                    hrefCollapse = \"#filme6\"\r\n                                      idCollapse = \"filme6\"\r\n\r\n                              }\r\n                                  else if(filme.title === \"The Force Awakens\"){\r\n                                    imagem = \"https://upload.wikimedia.org/wikipedia/pt/thumb/a/ae/Starwars_06.jpg/250px-Starwars_06.jpg\";\r\n                                      historia = this.state.filmes[6].opening_crawl\r\n                                        hrefCollapse = \"#filme7\"\r\n                                          idCollapse = \"filme7\"\r\n\r\n                                  }\r\n\r\n            return (  //Retorno das cards com as variaveis setadas\r\n              <div className=\"card\"  style={{ width: \"18rem\" }}>\r\n                \r\n                  <img className=\"imagens-card card-img-top\" src={imagem} alt=\"Imagem capa filme\"/>\r\n                  <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">Star Wars {filme.title}</h5>\r\n                    <p className=\"card-text\">\r\n                    ⋆ Diretor: <span className=\"nome-diretor\">{filme.director}</span>\r\n                    </p>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <ul className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">⋆ Data de lancamento: {filme.release_date}</li>\r\n                      <li className=\"list-group-item\">⋆ Produtor: {filme.producer}</li>\r\n                      <li className=\"list-group-item\">⋆ Episodio da franquia: {filme.episode_id}</li>\r\n                    </ul>\r\n                  </div>\r\n                \r\n                  <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" data-target={hrefCollapse}>Historia do Filme</button>     \r\n\r\n                  {/*MODAL*/}\r\n\r\n                    <div>\r\n                      <div className=\"modal fade\" id={idCollapse} tabIndex={-1} role=\"dialog\" aria-labelledby=\"TituloModalCentralizado\" aria-hidden=\"true\">\r\n                          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n                              <div className=\"modal-content\">\r\n                                  <div className=\"modal-header\">\r\n\r\n                                      <h5 className=\"modal-title title-modal\" id=\"TituloModalCentralizado\"> Star Wars {filme.title} </h5>\r\n\r\n                                      <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Fechar\">\r\n                                          <span aria-hidden=\"true\">×</span>\r\n                                      </button>\r\n                                  </div>\r\n                                  <div className=\"modal-body\">\r\n                                      <p >{historia}</p>\r\n                                  </div>\r\n                                  <div className=\"modal-footer\">\r\n                                      <button type=\"button\" className=\"btn btn-primary\" data-dismiss=\"modal\">Fechar</button>\r\n                                  </div>\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n\r\n                </div>   \r\n              );\r\n              // Fim do loop que gera os cards\r\n          })} \r\n\r\n\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Card;\r\n","import  React from 'react'\r\n\r\n\r\nexport default class NavBar extends React.Component{\r\n    render(){\r\n        return(\r\n        <nav >\r\n            <p className=\"titulo-navbar\">\r\n                Saga Star Wars\r\n            </p>\r\n        </nav>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <footer id=\"sticky-footer\" className=\"py-4 bg-dark text-white-50\">\r\n        <div className=\"container text-center\">\r\n          <p className=\"txt-footer\">Copyright &copy; Felipe Lopes <a href=\"https://www.linkedin.com/in/lopes-felipe/\"><img className=\"icon-footer\" alt=\"linkedin felipe\" src=\"https://img.icons8.com/doodle/64/000000/linkedin.png\"></img></a>\r\n          <a href=\"https://github.com/FelipeLopes94\"> <img className=\"icon-footer\" alt=\"github Felipe\" src=\"https://img.icons8.com/doodle/48/000000/github--v2.png\"></img></a></p>\r\n        </div>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Card from \"./components/Card\";\r\nimport NavBar from \"./components/Navbar\";\r\nimport Footer from \"./components/footer\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <header className=\"navbar\">\r\n          <NavBar />\r\n        </header>\r\n\r\n        <body className=\"main-body\">\r\n            <div classnName=\"container\">\r\n              <div className=\"cards row col-md-12\" >\r\n                <Card/>\r\n              </div>\r\n            </div>\r\n        </body>\r\n\r\n        <footer className=\"footer\">\r\n          <Footer />\r\n        </footer>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}